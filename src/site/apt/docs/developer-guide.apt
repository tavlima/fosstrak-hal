              -------------------
              Developer Guide
              -------------------
              Jonas Haller, TODO
              -------------------
              05.12.2007
              -------------------

Developer Guide

* Contents

   [[1]] {{{#About}About this Guide}}

   [[2]] {{{#Getting}Getting Started}}

   [[3]] {{{#Project}Project Layout}}

   [[4]] {{{#Using}Using Maven}}

   [[5]] {{{#Configuring}Configuring Accada EPCIS Repository}}


* {About} this Guide

  This guide is intended for developers who wish to work on Accada HAL
  Implementations. It outlines the steps to follow for setting up the development
  environment and helps developers to find their way through the code.


* {Getting} Started

  This section describes the setup of the development environment we use when
  working on Accada's HAL project.

** SVN Checkout

   First thing you need to do is checking out the code from the SVN repository.
   See {{{../source-repository.html}Source Repository}} on how to access the
   sources.

** Installing Maven

   We use {{{http://maven.apache.org/}Maven 2}} as our build tool.
   After installation you need to have the <<<M2_HOME>>> environment variable
   set to your Maven installation directory.

** Installing Java Communications API

   The FEIG OBID i-scan ID.ISC MR101-A implementation needs the Java Communications
   API to compile successfully and communicate with the reader. Instructions on
   installing the Java Communications API can be found in the
   {{{user-feig.html#Java%20Communications%20API}User Guide}}.


* {Project} Layout

  This section helps developers to find their way through the code.

** Project Modules

   Accada's HAL project consists of multiple modules. Currently, it includes four
   modules:

   * <<hal-common>>

     This module contains the HardwareAbstraction interface definition and common
     functionality such as exceptions, descriptors, models, types and utility classes.

   * <<hal-simulator>>

     This module consists of .

   * <<hal-impinj>>

     This module consists of .

   * <<hal-feig>>

     This module contains .

   []

** Directory Layout

   We use the standard Maven directory layout as follows:

---------------------------------------------------------------------------
|
+-- pom.xml                             -> top-level POM file
|
+-- LICENSE.txt, README.txt
|
+-- src/
|   |
|   +-- config/                         -> top-level configuration files, like checkstyle configs
|   |
|   `-- site/                           -> project documentation
|
+-- epcis-captureclient/
|   ¦
|   '
|
+-- epcis-commons/
|   ¦
|   '
|
+-- epcis-interop-test/
|   ¦
|   '
|
+-- epcis-queryclient/
|   ¦
|   '
|
+-- epcis-repository/
|   |
|   +-- pom.xml                                    -> module POM file
|   |
|   `-- src/
|       |
|       +-- main/
|       |   |
|       |   +-- java/                              -> java source files
|       |   |
|       |   +-- resources/                         -> wsdl and xsd schema files
|       |   |
|       |   +-- sql/                               -> database scripts
|       |   |
|       |   `-- webapp/
|       |       |
|       |       +-- META-INF/
|       |       |   |
|       |       |   +-- application.properties     -> application properties
|       |       |   |
|       |       |   +-- context.xml                -> tomcat context properties
|       |       |   |
|       |       |   `-- log4j.properties           -> log4j properties
|       |       |
|       |       `-- WEB-INF/
|       |           |
|       |           +-- server-config.wsdd         -> axis web service deployment descriptor
|       |           |
|       |           `-- web.xml                    -> tomcat deployment descriptor
|       |
|       +-- site/                                  -> module documentation
|       |
|       `-- test/
|           |
|           `-- java/                              -> java unit test source files
|
`-- target/                                        -> generated contents
---------------------------------------------------------------------------


* {Using} Maven

  Using Maven as our build tool has several advantages (such as the easy integration
  of handy plugins). We use the Tomcat plugin for deployment, the Eclipse plugin for
  generating the Eclipse project, and a handfull of reporting plugins.

** Building

   For building the sources, it is sufficient to run the following command:

---------------------------------------------------------------------------
mvn compile
---------------------------------------------------------------------------

** Deployment

   For deploying/undeploying the repository to/from Tomcat, we use the Maven Tomcat
   plugin. This plugin communicates with the Tomcat Manager. You therefore need
   to specify the username and password to access your Tomcat's Manager application
   by adding the following block to your <<<$M2_HOME/conf/settings.xml>>> file:

---------------------------------------------------------------------------
<server>
  <id>tomcat-manager</id>
  <username>admin</username>
  <password>1234</password>
</server>
---------------------------------------------------------------------------

   You can use the the following commands deploy or undeploy the EPCIS repository.
   Make sure you run these commands from the <<<epcis-repository>>> directory.
   Otherwise, Maven will fail as the tomcat-plugin is only available to the
   epcis-repository module.

---------------------------------------------------------------------------
mvn tomcat:deploy

mvn tomcat:undeploy
---------------------------------------------------------------------------

** Eclipse Integration

   In order to work on the Accada EPCIS Repository using Eclipse, follow these
   instructions:

   [[1]] Eclipse needs to know the path to the local maven repository. Execute
         the following command to automatically set up the corresponding classpath
         variable <<<M2_REPO>>> accordingly:

---------------------------------------------------------------------------
mvn -Declipse.workspace=<path-to-eclipse-workspace> eclipse:add-maven-repo
---------------------------------------------------------------------------

   [[1]] In order to generate the <<<.project>>> and <<<.classpath>>> files used by
         Eclipse, execute the following command from the directory containing
         the Accada EPCIS source code:

---------------------------------------------------------------------------
mvn -Dwtpversion=1.0 eclipse:eclipse
---------------------------------------------------------------------------

         Make sure you indicate the correct version of the Web Tools Project
         (WTP) you use in your Eclipse installation. <<<wtpversion=1.0>>> will
         work fine with WTP 1.5.x and even works well for Eclipse without WTP.

   [[1]] Inside Eclipse, import all the sub-modules (from the menu bar, select
         File > Import > Existing Projects into Workspace).

** Site Generation

   The main web site (containing this documentation) can be generated by using the following command:

---------------------------------------------------------------------------
mvn site -N
---------------------------------------------------------------------------

   In order to generate all module reports and to test the whole site navigation
   before a live deploy, you can execute the following command which will
   generate the web site under the given directory:

---------------------------------------------------------------------------
mvn site:stage -DstagingDirectory=d:\testsite
---------------------------------------------------------------------------

** Generation of Binaries

   The following command will generate the binaries for the modules, i.e.,
   it will generate assemblies for the epcis-captureclient and
   epcis-queryclient modules and it will generate a WAR file for the
   epcis-repository module.

---------------------------------------------------------------------------
mvn package
---------------------------------------------------------------------------


[]